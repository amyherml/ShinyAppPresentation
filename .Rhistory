fit$residuals
mean(fit$residuals)
cov(fit$residuals,
| galton$parent)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst<-var(est(ols.slope,ols.ic))
varChild = varRes + varEst
all.equal(varChild , varRes + varEst)
efit<- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
est(ols.slope,ols.ic)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
fit <- lm(child~parent)
fit <- lm(child~parent,galton)
sqr()
sqr(sum(fit$residuals^2))
sqrt(sum(fit$residuals^2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child^2)
sTot <- sum((galton$child-mu)^2)
sRes <- galton$child -
)
sRes <- sum(fit$residuals^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared == 1-sRes/sTot
summary(fit)$r.squared
cor(galton)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees
)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library(swirl)
swirl()
lm(swiss$Fertility~.)
all<-lm(swiss$Fertility~swiss$.)
?lm
?
all<-with(swiss,lm(Fertility~.))
all<-with(swiss,lm(Fertility~others))
all<-with(swiss,lm(Fertility~Education))
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss)
)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agricultruen,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~ . + ec)
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec,swiss)
efit$coefficients - all $coefficients
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSpary, class)
sapply(InsectSpary, class())
?sapply
sapply(InsectSprays,class())
sapply(InsectSprays,class
)
fit <- lm(count~spray,Insectsprays)
fit <- lm(count~spray,Insectspray)
fit <- lm(count~spray,InsectSprays)
summary(fit)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray-1,InsectSprays)
summary(nfit)$coefficients
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2 <- lm(InsectSprays$count~spray2,)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(hunger <- year)
fit <- lm(X <- year,hunger)
fit <- lm(X <- Year,hunger)
fit <- lm(Numeric <- Year,hunger)
fit <- lm(Numeric~ Year,hunger)
summary(fit)$coef
lmF <- lm(Numeric[[hunger$Sex=="Female"]] ~ Year,hunger)
lmF <- lm(Numeric[hunger$Sex=="Female",] ~ Year[hunger$Sex=="Female",] ,hunger)
lmF <- lm(hunger$Numeric[hunger$Sex=="Female",] ~ hunger$Year[hunger$Sex=="Female",])
lmF <- lm(Numeric[Sex=="Female",] ~ Year[Sex=="Female",],hunger)
lmF <- lm(Numeric~ Year,hunger[Sex=="Female",])
lmF <- lm(Numeric~ Year,hunger[hunger$Sex=="Female",])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="FMale"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year*Sex,hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fit2, which=1)
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
summary(fit)
View(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma <- sqrt(deviance(fit)/sigma*sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/sigma*sqrt(1-hatvalues(fitno)))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
lm
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ ., swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
.
lm
x1c <- simbias()
apply(x1c, 1, mean)
lm
fit1 <- lm(Fertility ~ Agriculture, swiss)
lm
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
lm
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
glm
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
lm
var(rpois(1000, 50))
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
offset=log(visits+1)
lm
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset =log(visits + 1))
qpois(.95, mdl2$fitted.values[704]).
qpois(.95, mdl2$fitted.values[704])
y1 <- c(140,138,150,148,135)
y2<- c(132,135,151,146,130)
t.test(y1,y2)
?t.test
t.test(y1-y2)
10/1787
t.test(10/1787-1/100)
t.test((10/1787)-(1/100)
)
)
0.01-0.0055
t.text(0.0045)
t.test(0.0045)
t = (-3-1)/(sqrt(0.5*(1.5^2+1.8^2))*sqrt(2/9)
)
t
?qt
pt(t)
pt(t,df=8)
qnorm(0.1)
1.96+1.28
3.24*4
12.92*12.96
qnorm(0.5)
qnorm(0.05)
qt(0.05)
qt(0.05,df=8)
qnorm(0.95)
0.01*10/0.04
1.64-2.5
pnorm(-0.86)
pnorm(-0.86)-1
qt(0.95,df=8)
qnorm(0.95)
load(MASS)
library(MASS)
?shuttle
?car
?mtcars
?shuttle
fit <- lm(auto~wind,shuttle)
fit <- lm(use~wind,shuttle)
head(shuttle)
class(shuttle)
class(shuttle$use)
class(shuttle$wind)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y~x)
fit <- glm(use~wind,offset=magn,shuttle)
fit <- glm(shuttle$use~shuttle$wind+shuttle$magn)
?InsectSprays
summary(m1 <- glm(count ~ spray, family="poisson", data=InsectSpray))
summary(m1 <- glm(count ~ spray, family="poisson", data=InsectSprays))
?glm
?shuttle
?glm
?shuttle
summary(m1 <- glm(use ~ wind, family="logit"), data=shuttle)
summary(m1 <- glm(use ~ wind, family="logit", data=shuttle)
)
m1 <- glm(use ~ wind, family="logit", data=shuttle)
m1 <- glm(use ~ wind, family=logit, data=shuttle)
m1 <- glm(use ~ wind, family=binomial(link = "logit"), data=shuttle)
summarym1
summary(m1)
m1 <- glm(use ~ wind+magn, family=binomial(link = "logit"), data=shuttle)
summary(m1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
head(training)
plot(training$CompressiveStrength,rownames(traing))
plot(training$CompressiveStrength,rownames(training))
plot(rownames(training),training$CompressiveStrength,)
pairs(training)
featurePlot(x=training,y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,-c("CompressiveStrength")],y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c(-9)],y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("FlyAsh")],y=training$CompressiveStrength, plot="pairs")
head(training)
pairs(training)
dev.off()
dev.off()
pairs(training)
pdf("test.pdf")
pairs(training)
dev.off()
getwd()
plot(rownames(training),training$CompressiveStrength, col=training$FlyAsh)
cut2(training$FlyAsh)
library(Hmisc)
cut2(training$FlyAsh)
plot(rownames(training),training$CompressiveStrength, col=cut2(training$FlyAsh))
plot(training$CompressiveStrength, training$FlyAsh)
plot(training$CompressiveStrength, training$Age)
plot(rownames(training),training$CompressiveStrength, col=cut2(training$Age))
plot(training$CompressiveStrength, training$Age)
colnames(training)
plot(rownames(training),training$CompressiveStrength, col=cut2(training$Cement))
plot(rownames(training),training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag))
plot(rownames(training),training$CompressiveStrength, col=cut2(training$Water))
plot(rownames(training),training$CompressiveStrength, col=cut2(training$Superplasticizer))
plot(rownames(training),training$CompressiveStrength, col=cut2(training$CoarseAggregate))
plot(rownames(training),training$CompressiveStrength, col=cut2(training$FineAggregate))
plot(rownames(training),training$CompressiveStrength, col=cut2(training$Age))
plot(training$Cement, training$CompressiveStrength)
cor(training$Cement, training$CompressiveStrength)
gplot(rownames(traning),CompressiveStrength,colour=FlyAsh,data=training)
qplot(rownames(traning),CompressiveStrength,colour=FlyAsh,data=training)
qplot(rownames(training),CompressiveStrength,colour=FlyAsh,data=training)
qplot(rownames(training),CompressiveStrength,colour=cut2(FlyAsh,g=3),data=training)
qplot(rownames(training),CompressiveStrength,colour=cut2(FlyAsh,g=4),data=training)
qplot(rownames(training),CompressiveStrength,colour=cut2(FlyAsh,g=4),data=training)
qplot(rownames(training),CompressiveStrength,colour=cut2(Age,g=4),data=training)
qplot(rownames(training),CompressiveStrength,colour=cut2(FlyAsh,g=3),data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
?histo
?hist
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
head(training)
which(pmatch("IL",colnames(training))
)
pmatch("IL",colnames(training)
)
colnames(training
)
pmatch("IL_",colnames(training)
)
grep("IL_",colnames(training))
index <-grep("IL_",colnames(training))
preProc <- preProcess(training[,index],method="pca",pcaComp=2)
spamPC <_ predict(preProc,training[,index])
spamPC <- predict(preProc,training[,index])
plot(spamPC[,1],spamPC[,2])
preProc <- preProcess(training[,index],method="pca",pcaComp=7)
?predict
spamPC <- predict(preProc,training[,index])
head(spam)
head(spam$type)
library(caret)
library(kernlab)
install.library(kernlab)
install.packages(kernlab)
dummyVars
?dummyVars
dummies
?nearZeroVar
?bs
head(spam[,-58])
library(caret)
library(kernlab)
install.packages("kernlab")
data(spam)
spam
library(kernlab)
data(spam)
head(span)
head(spam)
log10(spam[,-58]+1)
preProc <- preProcess(log10(spam[,-58]+1), method="pca", pcaComp=2)
head(preProc)
?predict
spamPC <- predict(preProc, log10(spam[,-58]+1))
head(spamPC)
?prcomp
install.packages("shiny")
getwd()
setwd("./Work/projects/creatingDataProduct/")
library("shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sqr()
?sq
?sqr
?square
runApp()
runApp()
runApp()
runApp()
?numeric
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- "Under"
b<-"Over"
grepl(a,"Under")
runApp()
runApp()
?string
runApp()
runApp()
?as.charactor
runApp()
a
b
a==b
a=="Under"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knit("README.Rmd")
library(knitker)
library(knitcer)
library(knicer)
library(kniker)
library(knitr)
knit("README.Rmd")
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='amyherml',
token='D68E09B9E3B2C0F9A45AEC13F35DAD63',
secret='<SECRET>')
shinyapps::setAccountInfo(name='amyherml',
token='D68E09B9E3B2C0F9A45AEC13F35DAD63',
secret='4T9QtW4E9f67Sd1FOd0LvmrXFdeSspm9TUn0FYQt')
library(shinyapps)
shinyapps::deployApp('.')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyapps::setAccountInfo(name='amyherml',
token='D68E09B9E3B2C0F9A45AEC13F35DAD63',
secret='4T9QtW4E9f67Sd1FOd0LvmrXFdeSspm9TUn0FYQt')
library(shinyapps)
shinyapps::deployApp('.')
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('sliditfyLibraries','ramnathv')
library(slidify)
author('Steps_Calculator')
slidify("index.RmD")
slidify("index.Rmd")
install.packages("slidifyLibraries")
